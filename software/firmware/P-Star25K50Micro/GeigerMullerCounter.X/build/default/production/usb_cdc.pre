
# 1 "usb_cdc.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 59 ".\usb_ch9.h"
enum PID {
PID_OUT = 0x01,
PID_IN = 0x09,
PID_SOF = 0x05,
PID_SETUP = 0x0D,
PID_DATA0 = 0x03,
PID_DATA1 = 0x0B,
PID_DATA2 = 0x07,
PID_MDATA = 0x0F,
PID_ACK = 0x02,
PID_NAK = 0x0A,
PID_STALL = 0x0E,
PID_NYET = 0x06,
PID_PRE = 0x0C,
PID_ERR = 0x0C,
PID_SPLIT = 0x08,
PID_PING = 0x04,
PID_RESERVED = 0x00,
};

# 83
enum DestinationType {
DEST_DEVICE = 0,
DEST_INTERFACE = 1,
DEST_ENDPOINT = 2,
DEST_OTHER_ELEMENT = 3,
};

# 94
enum RequestType {
REQUEST_TYPE_STANDARD = 0,
REQUEST_TYPE_CLASS = 1,
REQUEST_TYPE_VENDOR = 2,
REQUEST_TYPE_RESERVED = 3,
};

# 105
enum StandardControlRequest {
GET_STATUS = 0x0,
CLEAR_FEATURE = 0x1,
SET_FEATURE = 0x3,
SET_ADDRESS = 0x5,
GET_DESCRIPTOR = 0x6,
SET_DESCRIPTOR = 0x7,
GET_CONFIGURATION = 0x8,
SET_CONFIGURATION = 0x9,
GET_INTERFACE = 0xA,
SET_INTERFACE = 0xB,
SYNCH_FRAME = 0xC,
};


enum DescriptorTypes {
DESC_DEVICE = 0x1,
DESC_CONFIGURATION = 0x2,
DESC_STRING = 0x3,
DESC_INTERFACE = 0x4,
DESC_ENDPOINT = 0x5,
DESC_DEVICE_QUALIFIER = 0x6,
DESC_OTHER_SPEED_CONFIGURATION = 0x7,
DESC_INTERFACE_POWER = 0x8,
DESC_OTG = 0x9,
DESC_DEBUG = 0xA,
DESC_INTERFACE_ASSOCIATION = 0xB,
};

# 143
enum DeviceClassCodes {
DEVICE_CLASS_DEFINED_AT_INTERFACE_LEVEL = 0x0,
DEVICE_CLASS_MISC = 0xef,
DEVICE_CLASS_APPLICATION_SPECIFIC = 0xfe,
DEVICE_CLASS_VENDOR_SPECIFIC = 0xff,
};


enum EndpointAttributes {
EP_CONTROL = 0x0,
EP_ISOCHRONOUS = 0x1,
EP_BULK = 0x2,
EP_INTERRUPT = 0x3,


};

# 165
struct setup_packet {
union {
struct {
uint8_t destination : 5;
uint8_t type : 2;
uint8_t direction : 1;
};
uint8_t bmRequestType;
} REQUEST;
uint8_t bRequest;
uint16_t wValue;
uint16_t wIndex;
uint16_t wLength;
};


struct device_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint16_t bcdUSB;
uint8_t bDeviceClass;
uint8_t bDeviceSubclass;
uint8_t bDeviceProtocol;
uint8_t bMaxPacketSize0;
uint16_t idVendor;
uint16_t idProduct;
uint16_t bcdDevice;
uint8_t iManufacturer;
uint8_t iProduct;
uint8_t iSerialNumber;
uint8_t bNumConfigurations;
};


struct configuration_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint16_t wTotalLength;
uint8_t bNumInterfaces;
uint8_t bConfigurationValue;
uint8_t iConfiguration;
uint8_t bmAttributes;
uint8_t bMaxPower;
};


struct interface_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint8_t bInterfaceNumber;
uint8_t bAlternateSetting;
uint8_t bNumEndpoints;
uint8_t bInterfaceClass;
uint8_t bInterfaceSubclass;
uint8_t bInterfaceProtocol;
uint8_t iInterface;
};


struct endpoint_descriptor {

uint8_t bLength;
uint8_t bDescriptorType;
uint8_t bEndpointAddress;
uint8_t bmAttributes;
uint16_t wMaxPacketSize;
uint8_t bInterval;
};


struct string_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint16_t chars[];
};

# 246
struct interface_association_descriptor {
uint8_t bLength;
uint8_t bDescriptorType;
uint8_t bFirstInterface;
uint8_t bInterfaceCount;
uint8_t bFunctionClass;
uint8_t bFunctionSubClass;
uint8_t bFunctionProtocol;
uint8_t iFunction;
};

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdbool.h"
typedef unsigned char bool;

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdlib.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 16
extern int errno;

# 27
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 98 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);


extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 46 ".\usb.h"
struct setup_packet;

# 83
extern int16_t usb_application_get_string(uint8_t string_number, const void **ptr);

# 92
extern const struct device_descriptor this_device_descriptor;

# 110
extern const struct configuration_descriptor *usb_application_config_descs[];

# 144
void app_set_configuration_callback(uint8_t configuration);

# 158
uint16_t app_get_device_status_callback();

# 172
void app_endpoint_halt_callback(uint8_t endpoint, bool halted);

# 191
int8_t app_set_interface_callback(uint8_t interface, uint8_t alt_setting);

# 209
int8_t app_get_interface_callback(uint8_t interface);

# 226
void app_out_transaction_callback(uint8_t endpoint);

# 243
void app_in_transaction_complete_callback(uint8_t endpoint);

# 290
int8_t app_unknown_setup_request_callback(const struct setup_packet *pkt);

# 316
int16_t app_unknown_get_descriptor_callback(const struct setup_packet *pkt, const void **descriptor);

# 327
void app_start_of_frame_callback(void);

# 337
void app_usb_reset_callback(void);

# 350
void usb_init(void);

# 364
void usb_service(void);

# 375
uint8_t usb_get_configuration(void);

# 402
unsigned char *usb_get_in_buffer(uint8_t endpoint);

# 416
void usb_send_in_buffer(uint8_t endpoint, size_t len);

# 428
bool usb_in_endpoint_busy(uint8_t endpoint);

# 441
bool usb_in_endpoint_halted(uint8_t endpoint);

# 454
bool usb_out_endpoint_has_data(uint8_t endpoint);

# 466
void usb_arm_out_endpoint(uint8_t endpoint);

# 480
bool usb_out_endpoint_halted(uint8_t endpoint);

# 495
uint8_t usb_get_out_buffer(uint8_t endpoint, const unsigned char **buffer);

# 508
typedef void (*usb_ep0_data_stage_callback)(bool transfer_ok, void *context);

# 533
void usb_start_receive_ep0_data_stage(char *buffer, size_t len,
usb_ep0_data_stage_callback callback, void *context);

# 562
void usb_send_data_stage(char *buffer, size_t len,
usb_ep0_data_stage_callback callback, void *context);

# 74 ".\usb_cdc.h"
enum CDCDescriptorTypes {
DESC_CS_INTERFACE = 0x24,
DESC_CS_ENDPOINT = 0x25,
};


enum CDCFunctionalDescriptorSubtypes {
CDC_FUNCTIONAL_DESCRIPTOR_SUBTYPE_HEADER = 0x0,
CDC_FUNCTIONAL_DESCRIPTOR_SUBTYPE_ACM = 0x2,
CDC_FUNCTIONAL_DESCRIPTOR_SUBTYPE_UNION = 0x6,
};

# 92
enum CDCACMCapabilities {
CDC_ACM_CAPABILITY_COMM_FEATURES = 0x1,
CDC_ACM_CAPABILITY_LINE_CODINGS = 0x2,
CDC_ACM_CAPABILITY_SEND_BREAK = 0x4,
CDC_ACM_CAPABILITY_NETWORK_CONNECTION = 0x8,
};

# 105
enum CDCRequests {
CDC_SEND_ENCAPSULATED_COMMAND = 0x0,
CDC_GET_ENCAPSULATED_RESPONSE = 0x1,
CDC_SET_COMM_FEATURE = 0x2,
CDC_GET_COMM_FEATURE = 0x3,
CDC_CLEAR_COMM_FEATURE = 0x4,
CDC_SET_LINE_CODING = 0x20,
CDC_GET_LINE_CODING = 0x21,
CDC_SET_CONTROL_LINE_STATE = 0x22,
CDC_SEND_BREAK = 0x23,
};

# 121
enum CDCCommFeatureSelector {
CDC_FEATURE_ABSTRACT_STATE = 0x1,
CDC_FEATURE_COUNTRY_SETTING = 0x2,
};

# 132
enum CDCCharFormat {
CDC_CHAR_FORMAT_1_STOP_BIT = 0,
CDC_CHAR_FORMAT_1_POINT_5_STOP_BITS = 1,
CDC_CHAR_FORMAT_2_STOP_BITS = 2,
};

# 144
enum CDCParityType {
CDC_PARITY_NONE = 0,
CDC_PARITY_ODD = 1,
CDC_PARITY_EVEN = 2,
CDC_PARITY_MARK = 3,
CDC_PARITY_SPACE = 4,
};

# 156
enum CDCNotifications {
CDC_NETWORK_CONNECTION = 0x0,
CDC_RESPONSE_AVAILABLE = 0x1,
CDC_SERIAL_STATE = 0x20,
};

# 168
struct cdc_functional_descriptor_header {
uint8_t bFunctionLength;
uint8_t bDescriptorType;
uint8_t bDescriptorSubtype;
uint16_t bcdCDC;
};

# 179
struct cdc_acm_functional_descriptor {
uint8_t bFunctionLength;
uint8_t bDescriptorType;
uint8_t bDescriptorSubtype;
uint8_t bmCapabilities;
};

# 190
struct cdc_union_functional_descriptor {
uint8_t bFunctionLength;
uint8_t bDescriptorType;
uint8_t bDescriptorSubtype;
uint8_t bMasterInterface;
uint8_t bSlaveInterface0;

# 199
};

# 206
struct cdc_notification_header {
union {
struct {
uint8_t destination : 5;
uint8_t type : 2;
uint8_t direction : 1;
};
uint8_t bmRequestType;
} REQUEST;
uint8_t bNotification;
uint16_t wValue;
uint16_t wIndex;
uint16_t wLength;
};

# 226
struct cdc_serial_state_notification {
struct cdc_notification_header header;
union {
struct {
uint16_t bRxCarrier : 1;
uint16_t bTxCarrier : 1;
uint16_t bBreak : 1;
uint16_t bRingSignal : 1;
uint16_t bFraming : 1;
uint16_t bParity : 1;
uint16_t bOverrun : 1;
uint16_t : 1;
uint16_t : 8;
} bits;
uint16_t serial_state;
} data;
};

# 253
struct cdc_line_coding {
uint32_t dwDTERate;
uint8_t bCharFormat;
uint8_t bParityType;
uint8_t bDataBits;
};

# 273
uint8_t process_cdc_setup_request(const struct setup_packet *setup);

# 307
extern int8_t app_send_encapsulated_command(uint8_t interface,
uint16_t length);

# 339
extern int16_t app_get_encapsulated_response(uint8_t interface,
uint16_t length, const void **response,
usb_ep0_data_stage_callback *callback,
void **context);

# 360
extern void app_set_comm_feature_callback(uint8_t interface,
bool idle_setting,
bool data_multiplexed_state);

# 380
extern void app_clear_comm_feature_callback(uint8_t interface,
bool idle_setting,
bool data_multiplexed_state);

# 401
extern int8_t app_get_comm_feature_callback(
uint8_t interface,
bool *idle_setting,
bool *data_multiplexed_state);

# 420
extern void app_set_line_coding_callback(uint8_t interface,
const struct cdc_line_coding *coding);

# 446
extern int8_t app_get_line_coding_callback(uint8_t interface,
struct cdc_line_coding *coding);

# 465
extern int8_t app_set_control_line_state_callback(uint8_t interface,
bool dtr, bool dts);

# 483
extern int8_t app_send_break_callback(uint8_t interface, uint16_t duration);

# 35 "usb_cdc.c"
typedef char STATIC_SIZE_CHECK_LINE_35 [(sizeof(struct cdc_functional_descriptor_header)==5)?1:-1];
typedef char STATIC_SIZE_CHECK_LINE_36 [(sizeof(struct cdc_acm_functional_descriptor)==4)?1:-1];
typedef char STATIC_SIZE_CHECK_LINE_37 [(sizeof(struct cdc_union_functional_descriptor)==5)?1:-1];
typedef char STATIC_SIZE_CHECK_LINE_38 [(sizeof(struct cdc_line_coding)==7)?1:-1];
typedef char STATIC_SIZE_CHECK_LINE_39 [(sizeof(struct cdc_notification_header)==8)?1:-1];
typedef char STATIC_SIZE_CHECK_LINE_40 [(sizeof(struct cdc_serial_state_notification)==10)?1:-1];

# 69
static uint8_t transfer_interface;
static union transfer_data {

# 74
uint16_t comm_feature;



struct cdc_line_coding line_coding;

} transfer_data;


static uint8_t set_or_clear_request;
static void set_or_clear_comm_feature_callback(bool transfer_ok, void *context)
{


if (!transfer_ok)
return;

bool idle_setting = (transfer_data.comm_feature & 1) != 0;
bool data_multiplexed_state = (transfer_data.comm_feature & 2) != 0;

if (set_or_clear_request == CDC_SET_COMM_FEATURE) {
app_set_comm_feature_callback(transfer_interface,
idle_setting,
data_multiplexed_state);
}
else {

app_clear_comm_feature_callback(transfer_interface,
idle_setting,
data_multiplexed_state);
}
}



static void set_line_coding(bool transfer_ok, void *context) {
if (!transfer_ok)
return;

app_set_line_coding_callback(transfer_interface,
&transfer_data.line_coding);
}



uint8_t process_cdc_setup_request(const struct setup_packet *setup)
{


uint8_t interface = setup->wIndex;

# 135
if (setup->bRequest == CDC_SEND_ENCAPSULATED_COMMAND &&
setup->REQUEST.bmRequestType == 0x21) {
int8_t res;
res = app_send_encapsulated_command(interface,
setup->wLength);
if (res < 0)
return -1;
return 0;
}



if (setup->bRequest == CDC_GET_ENCAPSULATED_RESPONSE &&
setup->REQUEST.bmRequestType == 0xa1) {
const void *response;
int16_t len;
usb_ep0_data_stage_callback callback;
void *context;

len = app_get_encapsulated_response(
interface, setup->wLength,
&response, &callback,
&context);
if (len < 0)
return -1;

usb_send_data_stage((void*)response,
(((len) < (setup->wLength)) ? (len) : (setup->wLength)),
callback, context);
return 0;
}



if (setup->bRequest == CDC_SET_COMM_FEATURE &&
setup->REQUEST.bmRequestType == 0x21) {

# 174
if (setup->wValue != CDC_FEATURE_ABSTRACT_STATE)
return -1;

transfer_interface = interface;
set_or_clear_request = setup->bRequest;
usb_start_receive_ep0_data_stage((char*) &transfer_data.comm_feature,
sizeof(transfer_data.comm_feature),
set_or_clear_comm_feature_callback,
(0));
return 0;
}



if (setup->bRequest == CDC_CLEAR_COMM_FEATURE &&
setup->REQUEST.bmRequestType == 0x21) {

# 193
if (setup->wValue != CDC_FEATURE_ABSTRACT_STATE)
return -1;

transfer_interface = interface;
set_or_clear_request = setup->bRequest;
usb_start_receive_ep0_data_stage((char*)&transfer_data.comm_feature,
sizeof(transfer_data.comm_feature),
set_or_clear_comm_feature_callback,
(0));
return 0;
}



if (setup->bRequest == CDC_GET_COMM_FEATURE &&
setup->REQUEST.bmRequestType == 0xa1) {
bool idle_setting;
bool data_multiplexed_state;
int8_t res;

# 215
if (setup->wValue != CDC_FEATURE_ABSTRACT_STATE)
return -1;

res = app_get_comm_feature_callback(
interface,
&idle_setting,
&data_multiplexed_state);
if (res < 0)
return -1;

transfer_data.comm_feature =
(uint16_t) idle_setting |
(uint16_t) data_multiplexed_state << 1;

usb_send_data_stage((char*)&transfer_data.comm_feature,
(((setup->wLength) < (sizeof(transfer_data.comm_feature))) ? (setup->wLength) : (sizeof(transfer_data.comm_feature))),

# 232
(0) , (0));
return 0;
}



if (setup->bRequest == CDC_SET_LINE_CODING &&
setup->REQUEST.bmRequestType == 0x21) {

transfer_interface = interface;
usb_start_receive_ep0_data_stage(
(char*)&transfer_data.line_coding,
(((setup->wLength) < (sizeof(transfer_data.line_coding))) ? (setup->wLength) : (sizeof(transfer_data.line_coding))),

# 246
set_line_coding, (0));
return 0;
}



if (setup->bRequest == CDC_GET_LINE_CODING &&
setup->REQUEST.bmRequestType == 0xa1) {
int8_t res;

res = app_get_line_coding_callback(
interface,
&transfer_data.line_coding);
if (res < 0)
return -1;

usb_send_data_stage((char*)&transfer_data.line_coding,
(((setup->wLength) < (sizeof(transfer_data.line_coding))) ? (setup->wLength) : (sizeof(transfer_data.line_coding))),

# 265
(0), (0));
return 0;
}



if (setup->bRequest == CDC_SET_CONTROL_LINE_STATE &&
setup->REQUEST.bmRequestType == 0x21) {
int8_t res;
bool dtr = (setup->wValue & 0x1) != 0;
bool rts = (setup->wValue & 0x2) != 0;

res = app_set_control_line_state_callback(interface, dtr, rts);
if (res < 0)
return -1;


usb_send_data_stage((0), 0, (0), (0));

return 0;
}



if (setup->bRequest == CDC_SEND_BREAK &&
setup->REQUEST.bmRequestType == 0x21) {
int8_t res;

res = app_send_break_callback(interface,
setup->wValue );
if (res < 0)
return -1;


usb_send_data_stage((0), 0, (0), (0));

return 0;
}


return -1;
}
